name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: surrealpilot_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, redis, gd, imagick
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Copy environment file
      run: cp .env.example .env

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Install NPM dependencies
      run: npm ci

    - name: Generate application key
      run: php artisan key:generate

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Seed database
      run: php artisan db:seed --force

    - name: Build assets
      run: npm run build

    - name: Run PHP tests
      run: php artisan test --coverage-clover=coverage.xml
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Run PHP Static Analysis
      run: ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run PHP Code Style Check
      run: ./vendor/bin/pint --test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run security audit
      run: composer audit

    - name: Check for known security vulnerabilities
      run: php artisan security:check

  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, sqlite3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Test NativePHP build
      run: php artisan native:build --dry-run

  deploy-staging:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        # This would typically involve:
        # 1. Building the application
        # 2. Uploading to staging server
        # 3. Running deployment script

  deploy-production:
    needs: [test, security, build-desktop]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        # This would typically involve:
        # 1. Building the application
        # 2. Creating deployment package
        # 3. Uploading to Forge server
        # 4. Running post-deployment script

  notify:
    needs: [test, security, build-desktop]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "Notifying team of build status..."
        # Add notification logic here (Slack, Discord, etc.)